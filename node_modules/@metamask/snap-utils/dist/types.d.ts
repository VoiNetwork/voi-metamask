import { SnapExports } from '@metamask/snap-types';
import { Json } from '@metamask/utils';
import { NpmSnapPackageJson, SnapManifest } from './json-schemas';
/**
 * An object for storing parsed but unvalidated Snap file contents.
 */
export declare type UnvalidatedSnapFiles = {
    manifest?: Json;
    packageJson?: Json;
    sourceCode?: string;
    svgIcon?: string;
};
/**
 * An object for storing the contents of Snap files that have passed JSON
 * Schema validation, or are non-empty if they are strings.
 */
export declare type SnapFiles = {
    manifest: SnapManifest;
    packageJson: NpmSnapPackageJson;
    sourceCode: string;
    svgIcon?: string;
};
/**
 * The possible prefixes for snap ids.
 */
export declare enum SnapIdPrefixes {
    npm = "npm:",
    local = "local:"
}
export declare type SnapId = string;
export declare enum NpmSnapFileNames {
    PackageJson = "package.json",
    Manifest = "snap.manifest.json"
}
/**
 * Snap validation failure reason codes that are programmatically fixable
 * if validation occurs during development.
 */
export declare enum SnapValidationFailureReason {
    NameMismatch = "\"name\" field mismatch",
    VersionMismatch = "\"version\" field mismatch",
    RepositoryMismatch = "\"repository\" field mismatch",
    ShasumMismatch = "\"shasum\" field mismatch"
}
export declare enum SNAP_STREAM_NAMES {
    JSON_RPC = "jsonRpc",
    COMMAND = "command"
}
export declare enum HandlerType {
    OnRpcRequest = "onRpcRequest",
    OnTransaction = "onTransaction"
}
export declare type SnapRpcHookArgs = {
    origin: string;
    handler: HandlerType;
    request: Record<string, unknown>;
};
export declare type SnapRpcHook = (options: SnapRpcHookArgs) => Promise<unknown>;
declare type ObjectParameters<Type extends Record<string, (...args: any[]) => unknown>> = Parameters<Type[keyof Type]>;
export declare type SnapExportsParameters = ObjectParameters<SnapExports>;
export {};
