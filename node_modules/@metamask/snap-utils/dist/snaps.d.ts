import { SerializedEthereumRpcError } from 'eth-rpc-errors/dist/classes';
import { Json } from '@metamask/utils';
import { SnapManifest } from './json-schemas';
import { SnapId, SnapIdPrefixes, SnapValidationFailureReason } from './types';
export declare const LOCALHOST_HOSTNAMES: Set<string>;
export declare const SNAP_PREFIX = "wallet_snap_";
export declare const SNAP_PREFIX_REGEX: RegExp;
export declare const PROPOSED_NAME_REGEX: RegExp;
export declare type RequestedSnapPermissions = {
    [permission: string]: Record<string, Json>;
};
export declare type BlockedSnapInfo = {
    infoUrl?: string;
    reason?: string;
};
export declare type StatusContext = {
    snapId: string;
};
export declare type StatusEvents = {
    type: 'START' | 'STOP' | 'CRASH' | 'UPDATE';
};
export declare type StatusStates = {
    value: 'installing' | 'running' | 'stopped' | 'crashed';
    context: StatusContext;
};
export declare type Status = StatusStates['value'];
export declare type VersionHistory = {
    origin: string;
    version: string;
    date: number;
};
/**
 * A Snap as it exists in {@link SnapController} state.
 */
export declare type Snap = {
    /**
     * Whether the Snap is enabled, which determines if it can be started.
     */
    enabled: boolean;
    /**
     * The ID of the Snap.
     */
    id: SnapId;
    /**
     * The initial permissions of the Snap, which will be requested when it is
     * installed.
     */
    initialPermissions: RequestedSnapPermissions;
    /**
     * The Snap's manifest file.
     */
    manifest: SnapManifest;
    /**
     * Whether the Snap is blocked.
     */
    blocked: boolean;
    /**
     * Information detailing why the snap is blocked.
     */
    blockInformation?: BlockedSnapInfo;
    /**
     * The name of the permission used to invoke the Snap.
     */
    permissionName: string;
    /**
     * The source code of the Snap.
     */
    sourceCode: string;
    /**
     * The current status of the Snap, e.g. whether it's running or stopped.
     */
    status: Status;
    /**
     * The version of the Snap.
     */
    version: string;
    /**
     * The version history of the Snap.
     * Can be used to derive when the Snap was installed, when it was updated to a certain version and who requested the change.
     */
    versionHistory: VersionHistory[];
};
export declare type TruncatedSnapFields = 'id' | 'initialPermissions' | 'permissionName' | 'version';
/**
 * A {@link Snap} object with the fields that are relevant to an external
 * caller.
 */
export declare type TruncatedSnap = Pick<Snap, TruncatedSnapFields>;
export declare type ProcessSnapResult = TruncatedSnap | {
    error: SerializedEthereumRpcError;
};
export declare type InstallSnapsResult = Record<SnapId, ProcessSnapResult>;
/**
 * An error indicating that a Snap validation failure is programmatically
 * fixable during development.
 */
export declare class ProgrammaticallyFixableSnapError extends Error {
    reason: SnapValidationFailureReason;
    constructor(message: string, reason: SnapValidationFailureReason);
}
/**
 * Calculates the Base64-encoded SHA-256 digest of a Snap source code string.
 *
 * @param sourceCode - The UTF-8 string source code of a Snap.
 * @returns The Base64-encoded SHA-256 digest of the source code.
 */
export declare function getSnapSourceShasum(sourceCode: string): string;
export declare type ValidatedSnapId = `local:${string}` | `npm:${string}`;
/**
 * Checks whether the `source.shasum` property of a Snap manifest matches the
 * shasum of a snap source code string.
 *
 * @param manifest - The manifest whose shasum to validate.
 * @param sourceCode - The source code of the snap.
 * @param errorMessage - The error message to throw if validation fails.
 */
export declare function validateSnapShasum(manifest: SnapManifest, sourceCode: string, errorMessage?: string): void;
/**
 * Extracts the snap prefix from a snap ID.
 *
 * @param snapId - The snap ID to extract the prefix from.
 * @returns The snap prefix from a snap id, e.g. `npm:`.
 */
export declare function getSnapPrefix(snapId: string): SnapIdPrefixes;
/**
 * Computes the permission name of a snap from its snap ID.
 *
 * @param snapId - The snap ID.
 * @returns The permission name corresponding to the given snap ID.
 */
export declare function getSnapPermissionName(snapId: string): string;
/**
 * Asserts the provided object is a snapId with a supported prefix.
 *
 * @param snapId - The object to validate.
 * @throws {@link Error}. If the validation fails.
 */
export declare function validateSnapId(snapId: unknown): asserts snapId is ValidatedSnapId;
/**
 * Typeguard to ensure a chainId follows the CAIP-2 standard.
 *
 * @param chainId - The chainId being tested.
 * @returns `true` if the value is a valid CAIP chain id, and `false` otherwise.
 */
export declare function isCaipChainId(chainId: unknown): chainId is string;
