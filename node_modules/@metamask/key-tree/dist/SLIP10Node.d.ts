/// <reference types="node" />
import { RootedSLIP10PathTuple, SLIP10PathTuple } from './constants';
import { SupportedCurve } from './curves';
import { BIP44Node } from './BIP44Node';
import { BIP44CoinTypeNode } from './BIP44CoinTypeNode';
/**
 * A wrapper for SLIP-10 Hierarchical Deterministic (HD) tree nodes, i.e.
 * cryptographic keys used to generate key pairs and addresses for cryptocurrency
 * protocols.
 */
export declare type JsonSLIP10Node = {
    /**
     * The 0-indexed path depth of this node.
     */
    readonly depth: number;
    /**
     * The fingerprint of the parent key, or 0 if this is a master node.
     */
    readonly parentFingerprint: number;
    /**
     * The index of the node, or 0 if this is a master node.
     */
    readonly index: number;
    /**
     * The (optional) private key of this node.
     */
    readonly privateKey?: string;
    /**
     * The public key of this node.
     */
    readonly publicKey: string;
    /**
     * The chain code of this node.
     */
    readonly chainCode: string;
    /**
     * The name of the curve used by the node.
     */
    readonly curve: SupportedCurve;
};
export declare type SLIP10NodeInterface = JsonSLIP10Node & {
    chainCodeBuffer: Buffer;
    /**
     * The private key for this node, as a Node.js Buffer or browser-equivalent.
     * May be undefined if this node is a public key only node.
     */
    privateKeyBuffer?: Buffer;
    /**
     * The public key for this node, as a Node.js Buffer or browser-equivalent.
     */
    publicKeyBuffer: Buffer;
    /**
     * @returns A JSON-compatible representation of this node's data fields.
     */
    toJSON(): JsonSLIP10Node;
};
declare type SLIP10NodeConstructorOptions = {
    readonly depth: number;
    readonly parentFingerprint: number;
    readonly index: number;
    readonly chainCode: Buffer;
    readonly privateKey?: Buffer;
    readonly publicKey: Buffer;
    readonly curve: SupportedCurve;
};
declare type SLIP10ExtendedKeyOptions = {
    readonly depth: number;
    readonly parentFingerprint: number;
    readonly index: number;
    readonly chainCode: string | Buffer;
    readonly privateKey?: string | Buffer;
    readonly publicKey?: string | Buffer;
    readonly curve: SupportedCurve;
};
declare type SLIP10DerivationPathOptions = {
    readonly derivationPath: RootedSLIP10PathTuple;
    readonly curve: SupportedCurve;
};
export declare class SLIP10Node implements SLIP10NodeInterface {
    /**
     * Wrapper of the {@link fromExtendedKey} function. Refer to that function
     * for documentation.
     *
     * @param json - The JSON representation of a SLIP-10 node.
     */
    static fromJSON(json: JsonSLIP10Node): Promise<SLIP10Node>;
    /**
     * Create a new SLIP-10 node from a key and chain code. You must specify
     * either a private key or a public key. When specifying a private key,
     * the public key will be derived from the private key.
     *
     * All parameters are stringently validated, and an error is thrown if
     * validation fails.
     *
     * @param depth - The depth of the node.
     * @param parentFingerprint - The fingerprint of the parent key, or 0 if
     * the node is a master node.
     * @param index - The index of the node, or 0 if the node is a master node.
     * @param privateKey - The private key for the node.
     * @param publicKey - The public key for the node. If a private key is
     * specified, this parameter is ignored.
     * @param chainCode - The chain code for the node.
     * @param curve - The curve used by the node.
     */
    static fromExtendedKey({ depth, parentFingerprint, index, privateKey, publicKey, chainCode, curve, }: SLIP10ExtendedKeyOptions): Promise<SLIP10Node>;
    /**
     * Create a new SLIP-10 node from a derivation path. The derivation path
     * must be rooted, i.e. it must begin with a BIP-39 node, given as a string of
     * the form `bip39:MNEMONIC`, where `MNEMONIC` is a space-separated list of
     * BIP-39 seed phrase words.
     *
     * All parameters are stringently validated, and an error is thrown if
     * validation fails.
     *
     * Recall that a BIP-44 HD tree path consists of the following nodes:
     *
     * `m / 44' / coin_type' / account' / change / address_index`
     *
     * With the following depths:
     *
     * `0 / 1 / 2 / 3 / 4 / 5`
     *
     * @param derivationPath - The rooted HD tree path that will be used
     * to derive the key of this node.
     * @param curve - The curve used by the node.
     */
    static fromDerivationPath({ derivationPath, curve, }: SLIP10DerivationPathOptions): Promise<SLIP10Node>;
    readonly curve: SupportedCurve;
    readonly depth: number;
    readonly parentFingerprint: number;
    readonly index: number;
    readonly chainCodeBuffer: Buffer;
    readonly privateKeyBuffer?: Buffer;
    readonly publicKeyBuffer: Buffer;
    constructor({ depth, parentFingerprint, index, chainCode, privateKey, publicKey, curve, }: SLIP10NodeConstructorOptions);
    get chainCode(): string;
    get privateKey(): string | undefined;
    get publicKey(): string;
    get compressedPublicKeyBuffer(): Buffer;
    get address(): string;
    get fingerprint(): number;
    /**
     * Returns a neutered version of this node, i.e. a node without a private key.
     */
    neuter(): SLIP10Node;
    /**
     * Derives a child of the key contains be this node and returns a new
     * {@link SLIP10Node} containing the child key.
     *
     * The specified path must be a valid HD path from this node, per SLIP-10.
     *
     * @param path - The partial (non-rooted) SLIP-10 HD tree path will be used
     * to derive a child key from the parent key contained within this node.
     * @returns The {@link SLIP10Node} corresponding to the derived child key.
     */
    derive(path: SLIP10PathTuple): Promise<SLIP10Node>;
    toJSON(): JsonSLIP10Node;
}
/**
 * Validates a BIP-32 path depth. Effectively, asserts that the depth is an
 * integer `number`. Throws an error if validation fails.
 *
 * @param depth - The depth to validate.
 */
export declare function validateBIP32Depth(depth: unknown): asserts depth is number;
/**
 * Validates a BIP-32 parent fingerprint. Effectively, asserts that the fingerprint is an
 * integer `number`. Throws an error if validation fails.
 *
 * @param parentFingerprint - The parent fingerprint to validate.
 */
export declare function validateParentFingerprint(parentFingerprint: unknown): asserts parentFingerprint is number;
declare type DeriveChildNodeArgs = {
    path: SLIP10PathTuple;
    node: SLIP10Node | BIP44Node | BIP44CoinTypeNode;
};
/**
 * Derives a child key from the given parent key.
 *
 * @param node - The node to derive from.
 * @param path - The path to the child node / key.
 * @returns The derived key and depth.
 */
export declare function deriveChildNode({ path, node, }: DeriveChildNodeArgs): Promise<SLIP10Node>;
export {};
