{"version":3,"file":"SLIP10Node.js","sourceRoot":"","sources":["../src/SLIP10Node.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BUFFER_KEY_LENGTH,\n  RootedSLIP10PathTuple,\n  SLIP10PathTuple,\n} from './constants';\nimport { curves, getCurveByName, SupportedCurve } from './curves';\nimport { deriveKeyFromPath } from './derivation';\nimport { publicKeyToEthAddress } from './derivers/bip32';\nimport {\n  getBuffer,\n  getFingerprint,\n  isValidInteger,\n  validateBIP32Index,\n} from './utils';\nimport { BIP44Node } from './BIP44Node';\nimport { BIP44CoinTypeNode } from './BIP44CoinTypeNode';\n\n/**\n * A wrapper for SLIP-10 Hierarchical Deterministic (HD) tree nodes, i.e.\n * cryptographic keys used to generate key pairs and addresses for cryptocurrency\n * protocols.\n */\nexport type JsonSLIP10Node = {\n  /**\n   * The 0-indexed path depth of this node.\n   */\n  readonly depth: number;\n\n  /**\n   * The fingerprint of the parent key, or 0 if this is a master node.\n   */\n  readonly parentFingerprint: number;\n\n  /**\n   * The index of the node, or 0 if this is a master node.\n   */\n  readonly index: number;\n\n  /**\n   * The (optional) private key of this node.\n   */\n  readonly privateKey?: string;\n\n  /**\n   * The public key of this node.\n   */\n  readonly publicKey: string;\n\n  /**\n   * The chain code of this node.\n   */\n  readonly chainCode: string;\n\n  /**\n   * The name of the curve used by the node.\n   */\n  readonly curve: SupportedCurve;\n};\n\nexport type SLIP10NodeInterface = JsonSLIP10Node & {\n  chainCodeBuffer: Buffer;\n\n  /**\n   * The private key for this node, as a Node.js Buffer or browser-equivalent.\n   * May be undefined if this node is a public key only node.\n   */\n  privateKeyBuffer?: Buffer;\n\n  /**\n   * The public key for this node, as a Node.js Buffer or browser-equivalent.\n   */\n  publicKeyBuffer: Buffer;\n\n  /**\n   * @returns A JSON-compatible representation of this node's data fields.\n   */\n  toJSON(): JsonSLIP10Node;\n};\n\ntype SLIP10NodeConstructorOptions = {\n  readonly depth: number;\n  readonly parentFingerprint: number;\n  readonly index: number;\n  readonly chainCode: Buffer;\n  readonly privateKey?: Buffer;\n  readonly publicKey: Buffer;\n  readonly curve: SupportedCurve;\n};\n\ntype SLIP10ExtendedKeyOptions = {\n  readonly depth: number;\n  readonly parentFingerprint: number;\n  readonly index: number;\n  readonly chainCode: string | Buffer;\n  readonly privateKey?: string | Buffer;\n  readonly publicKey?: string | Buffer;\n  readonly curve: SupportedCurve;\n};\n\ntype SLIP10DerivationPathOptions = {\n  readonly derivationPath: RootedSLIP10PathTuple;\n  readonly curve: SupportedCurve;\n};\n\nexport class SLIP10Node implements SLIP10NodeInterface {\n  /**\n   * Wrapper of the {@link fromExtendedKey} function. Refer to that function\n   * for documentation.\n   *\n   * @param json - The JSON representation of a SLIP-10 node.\n   */\n  static async fromJSON(json: JsonSLIP10Node): Promise<SLIP10Node> {\n    return SLIP10Node.fromExtendedKey(json);\n  }\n\n  /**\n   * Create a new SLIP-10 node from a key and chain code. You must specify\n   * either a private key or a public key. When specifying a private key,\n   * the public key will be derived from the private key.\n   *\n   * All parameters are stringently validated, and an error is thrown if\n   * validation fails.\n   *\n   * @param depth - The depth of the node.\n   * @param parentFingerprint - The fingerprint of the parent key, or 0 if\n   * the node is a master node.\n   * @param index - The index of the node, or 0 if the node is a master node.\n   * @param privateKey - The private key for the node.\n   * @param publicKey - The public key for the node. If a private key is\n   * specified, this parameter is ignored.\n   * @param chainCode - The chain code for the node.\n   * @param curve - The curve used by the node.\n   */\n  static async fromExtendedKey({\n    depth,\n    parentFingerprint,\n    index,\n    privateKey,\n    publicKey,\n    chainCode,\n    curve,\n  }: SLIP10ExtendedKeyOptions) {\n    const chainCodeBuffer = getBuffer(chainCode, BUFFER_KEY_LENGTH);\n\n    validateCurve(curve);\n    validateBIP32Depth(depth);\n    validateBIP32Index(index);\n    validateParentFingerprint(parentFingerprint);\n\n    if (privateKey) {\n      const privateKeyBuffer = getBuffer(privateKey, BUFFER_KEY_LENGTH);\n\n      return new SLIP10Node({\n        depth,\n        parentFingerprint,\n        index,\n        chainCode: chainCodeBuffer,\n        privateKey: privateKeyBuffer,\n        publicKey: await getCurveByName(curve).getPublicKey(privateKey),\n        curve,\n      });\n    }\n\n    if (publicKey) {\n      const publicKeyBuffer = getBuffer(\n        publicKey,\n        getCurveByName(curve).publicKeyLength,\n      );\n\n      return new SLIP10Node({\n        depth,\n        parentFingerprint,\n        index,\n        chainCode: chainCodeBuffer,\n        publicKey: publicKeyBuffer,\n        curve,\n      });\n    }\n\n    throw new Error(\n      'Invalid options: Must provide either a private key or a public key.',\n    );\n  }\n\n  /**\n   * Create a new SLIP-10 node from a derivation path. The derivation path\n   * must be rooted, i.e. it must begin with a BIP-39 node, given as a string of\n   * the form `bip39:MNEMONIC`, where `MNEMONIC` is a space-separated list of\n   * BIP-39 seed phrase words.\n   *\n   * All parameters are stringently validated, and an error is thrown if\n   * validation fails.\n   *\n   * Recall that a BIP-44 HD tree path consists of the following nodes:\n   *\n   * `m / 44' / coin_type' / account' / change / address_index`\n   *\n   * With the following depths:\n   *\n   * `0 / 1 / 2 / 3 / 4 / 5`\n   *\n   * @param derivationPath - The rooted HD tree path that will be used\n   * to derive the key of this node.\n   * @param curve - The curve used by the node.\n   */\n  static async fromDerivationPath({\n    derivationPath,\n    curve,\n  }: SLIP10DerivationPathOptions) {\n    validateCurve(curve);\n\n    if (!derivationPath) {\n      throw new Error('Invalid options: Must provide a derivation path.');\n    }\n\n    if (derivationPath.length === 0) {\n      throw new Error(\n        'Invalid derivation path: May not specify an empty derivation path.',\n      );\n    }\n\n    return await deriveKeyFromPath({\n      path: derivationPath,\n      depth: derivationPath.length - 1,\n      curve,\n    });\n  }\n\n  public readonly curve: SupportedCurve;\n\n  public readonly depth: number;\n\n  public readonly parentFingerprint: number;\n\n  public readonly index: number;\n\n  public readonly chainCodeBuffer: Buffer;\n\n  public readonly privateKeyBuffer?: Buffer;\n\n  public readonly publicKeyBuffer: Buffer;\n\n  constructor({\n    depth,\n    parentFingerprint,\n    index,\n    chainCode,\n    privateKey,\n    publicKey,\n    curve,\n  }: SLIP10NodeConstructorOptions) {\n    this.depth = depth;\n    this.parentFingerprint = parentFingerprint;\n    this.index = index;\n    this.chainCodeBuffer = chainCode;\n    this.privateKeyBuffer = privateKey;\n    this.publicKeyBuffer = publicKey;\n    this.curve = curve;\n\n    Object.freeze(this);\n  }\n\n  public get chainCode() {\n    return this.chainCodeBuffer.toString('hex');\n  }\n\n  public get privateKey(): string | undefined {\n    return this.privateKeyBuffer?.toString('hex');\n  }\n\n  public get publicKey(): string {\n    return this.publicKeyBuffer.toString('hex');\n  }\n\n  public get compressedPublicKeyBuffer(): Buffer {\n    return getCurveByName(this.curve).compressPublicKey(this.publicKeyBuffer);\n  }\n\n  public get address(): string {\n    if (this.curve !== 'secp256k1') {\n      throw new Error(\n        'Unable to get address for this node: Only secp256k1 is supported.',\n      );\n    }\n\n    return `0x${publicKeyToEthAddress(this.publicKeyBuffer).toString('hex')}`;\n  }\n\n  public get fingerprint(): number {\n    return getFingerprint(this.compressedPublicKeyBuffer);\n  }\n\n  /**\n   * Returns a neutered version of this node, i.e. a node without a private key.\n   */\n  public neuter(): SLIP10Node {\n    return new SLIP10Node({\n      depth: this.depth,\n      parentFingerprint: this.parentFingerprint,\n      index: this.index,\n      chainCode: this.chainCodeBuffer,\n      publicKey: this.publicKeyBuffer,\n      curve: this.curve,\n    });\n  }\n\n  /**\n   * Derives a child of the key contains be this node and returns a new\n   * {@link SLIP10Node} containing the child key.\n   *\n   * The specified path must be a valid HD path from this node, per SLIP-10.\n   *\n   * @param path - The partial (non-rooted) SLIP-10 HD tree path will be used\n   * to derive a child key from the parent key contained within this node.\n   * @returns The {@link SLIP10Node} corresponding to the derived child key.\n   */\n  public async derive(path: SLIP10PathTuple): Promise<SLIP10Node> {\n    return await deriveChildNode({\n      path,\n      node: this,\n    });\n  }\n\n  // This is documented in the interface of this class.\n  public toJSON(): JsonSLIP10Node {\n    return {\n      depth: this.depth,\n      parentFingerprint: this.parentFingerprint,\n      index: this.index,\n      curve: this.curve,\n      privateKey: this.privateKey,\n      publicKey: this.publicKey,\n      chainCode: this.chainCode,\n    };\n  }\n}\n\n/**\n * Validates the curve name.\n *\n * @param curveName - The name of the curve to validate.\n */\nfunction validateCurve(\n  curveName: unknown,\n): asserts curveName is SupportedCurve {\n  if (!curveName || typeof curveName !== 'string') {\n    throw new Error('Invalid curve: Must specify a curve.');\n  }\n\n  if (!Object.keys(curves).includes(curveName)) {\n    throw new Error(\n      `Invalid curve: Only the following curves are supported: ${Object.keys(\n        curves,\n      ).join(', ')}.`,\n    );\n  }\n}\n\n/**\n * Validates a BIP-32 path depth. Effectively, asserts that the depth is an\n * integer `number`. Throws an error if validation fails.\n *\n * @param depth - The depth to validate.\n */\nexport function validateBIP32Depth(depth: unknown): asserts depth is number {\n  if (!isValidInteger(depth)) {\n    throw new Error(\n      `Invalid HD tree path depth: The depth must be a positive integer. Received: \"${depth}\".`,\n    );\n  }\n}\n\n/**\n * Validates a BIP-32 parent fingerprint. Effectively, asserts that the fingerprint is an\n * integer `number`. Throws an error if validation fails.\n *\n * @param parentFingerprint - The parent fingerprint to validate.\n */\nexport function validateParentFingerprint(\n  parentFingerprint: unknown,\n): asserts parentFingerprint is number {\n  if (!isValidInteger(parentFingerprint)) {\n    throw new Error(\n      `Invalid parent fingerprint: The fingerprint must be a positive integer. Received: \"${parentFingerprint}\".`,\n    );\n  }\n}\n\ntype DeriveChildNodeArgs = {\n  path: SLIP10PathTuple;\n  node: SLIP10Node | BIP44Node | BIP44CoinTypeNode;\n};\n\n/**\n * Derives a child key from the given parent key.\n *\n * @param node - The node to derive from.\n * @param path - The path to the child node / key.\n * @returns The derived key and depth.\n */\nexport async function deriveChildNode({\n  path,\n  node,\n}: DeriveChildNodeArgs): Promise<SLIP10Node> {\n  if (path.length === 0) {\n    throw new Error(\n      'Invalid HD tree derivation path: Deriving a path of length 0 is not defined.',\n    );\n  }\n\n  // Note that we do not subtract 1 from the length of the path to the child,\n  // unlike when we calculate the depth of a rooted path.\n  const newDepth = node.depth + path.length;\n  validateBIP32Depth(newDepth);\n\n  return await deriveKeyFromPath({\n    path,\n    node,\n    depth: newDepth,\n  });\n}\n"]}