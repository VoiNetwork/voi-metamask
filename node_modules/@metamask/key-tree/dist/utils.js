"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFingerprint = exports.encodeBase58check = exports.decodeBase58check = exports.getBuffer = exports.bytesToNumber = exports.isValidInteger = exports.isValidBufferKey = exports.nullableHexStringToBuffer = exports.hexStringToBuffer = exports.isValidHexString = exports.stripHexPrefix = exports.isHardened = exports.isValidBIP32Index = exports.validateBIP32Index = exports.getBIP32NodeToken = exports.getUnhardenedBIP32NodeToken = exports.getHardenedBIP32NodeToken = exports.getBIP44CoinTypeToAddressPathTuple = exports.getBIP44ChangePathString = exports.getBIP44CoinTypePathString = void 0;
const utils_1 = require("@noble/hashes/utils");
const base_1 = require("@scure/base");
const sha256_1 = require("@noble/hashes/sha256");
const ripemd160_1 = require("@noble/hashes/ripemd160");
const constants_1 = require("./constants");
/**
 * Gets a string representation of a BIP-44 path of depth 2, i.e.:
 * `m / 44' / coin_type'`
 *
 * For display purposes only.
 *
 * @param coin_type - The `coin_type` index to create a path visualization for.
 * @returns The visualization of the BIP-44 path for thte specified `coin_type`.
 */
function getBIP44CoinTypePathString(coin_type) {
    return `m / ${constants_1.BIP44PurposeNodeToken} / ${getUnhardenedBIP32NodeToken(coin_type)}'`;
}
exports.getBIP44CoinTypePathString = getBIP44CoinTypePathString;
/**
 * Gets a string representation of a BIP-44 path of depth 4, i.e.:
 * `m / 44' / coin_type' / account' / change`
 *
 * For display purposes only.
 *
 * @param coinTypePath - The parent `coin_type` path.
 * @param coin_type - The `change` index to create a path visualization for.
 * @returns The visualization of the BIP-44 path for the specified `coin_type`
 * and `change` indices.
 */
function getBIP44ChangePathString(coinTypePath, indices) {
    return `${coinTypePath} / ${getHardenedBIP32NodeToken(indices.account || 0)} / ${getBIP32NodeToken(indices.change || 0)}`;
}
exports.getBIP44ChangePathString = getBIP44ChangePathString;
/**
 * Gets a BIP-44 path tuple of the form `account' / change / address_index`,
 * which can be used to derive address keys together with a `coin_type` key.
 *
 * @param indices - The BIP-44 derivation index values.
 * @param indices.account - The `account` index value.
 * @param indices.change - The `change` index value.
 * @param indices.address_index - The `address_index` index value.
 * @returns The `account' / change / address_index` path corresponding to the
 * specified indices.
 */
function getBIP44CoinTypeToAddressPathTuple({ account = 0, change = 0, address_index, }) {
    return [
        getHardenedBIP32NodeToken(account),
        getBIP32NodeToken(change),
        getBIP32NodeToken(address_index),
    ];
}
exports.getBIP44CoinTypeToAddressPathTuple = getBIP44CoinTypeToAddressPathTuple;
/**
 * A hardened BIP-32 node token, e.g. `bip32:0'`.
 * Validates that the index is a non-negative integer number, and throws an
 * error if validation fails.
 *
 * @param index - The index of the node.
 * @returns The hardened BIP-32 node token.
 */
function getHardenedBIP32NodeToken(index) {
    validateBIP32Index(index);
    return `${getUnhardenedBIP32NodeToken(index)}'`;
}
exports.getHardenedBIP32NodeToken = getHardenedBIP32NodeToken;
/**
 * An unhardened BIP-32 node token, e.g. `bip32:0`.
 * Validates that the index is a non-negative integer number, and throws an
 * error if validation fails.
 *
 * @param index - The index of the node.
 * @returns The unhardened BIP-32 node token.
 */
function getUnhardenedBIP32NodeToken(index) {
    validateBIP32Index(index);
    return `bip32:${index}`;
}
exports.getUnhardenedBIP32NodeToken = getUnhardenedBIP32NodeToken;
/**
 * A hardened or unhardened BIP-32 node token, e.g. `bip32:0` or `bip32:0'`.
 * Validates that the index is a non-negative integer number, and throws an
 * error if validation fails.
 *
 * @param index - The index of the node.
 * @returns The hardened or unhardened BIP-32 node token.
 */
function getBIP32NodeToken(index) {
    if (typeof index === 'number') {
        return getUnhardenedBIP32NodeToken(index);
    }
    if (!index ||
        !Number.isInteger(index.index) ||
        typeof index.hardened !== 'boolean') {
        throw new Error('Invalid BIP-32 index: Must be an object containing the index and whether it is hardened.');
    }
    if (index.hardened) {
        return getHardenedBIP32NodeToken(index.index);
    }
    return getUnhardenedBIP32NodeToken(index.index);
}
exports.getBIP32NodeToken = getBIP32NodeToken;
/**
 * Validates that the index is a non-negative integer number. Throws an
 * error if validation fails.
 *
 * @param addressIndex - The index to validate.
 */
function validateBIP32Index(addressIndex) {
    if (!isValidBIP32Index(addressIndex)) {
        throw new Error(`Invalid BIP-32 index: Must be a non-negative integer.`);
    }
}
exports.validateBIP32Index = validateBIP32Index;
/**
 * @param index - The BIP-32 index to test.
 * @returns Whether the index is a non-negative integer number.
 */
function isValidBIP32Index(index) {
    return isValidInteger(index);
}
exports.isValidBIP32Index = isValidBIP32Index;
/**
 * @param bip32Token - The token to test.
 * @returns Whether the token is hardened, i.e. ends with `'`.
 */
function isHardened(bip32Token) {
    return bip32Token.endsWith(`'`);
}
exports.isHardened = isHardened;
/**
 * @param hexString - The hexadecimal string to strip.
 * @returns The hexadecimal string, without a `0x`-prefix, if any.
 */
function stripHexPrefix(hexString) {
    return hexString.replace(/^0x/iu, '');
}
exports.stripHexPrefix = stripHexPrefix;
/**
 * Tests whether the specified string is a valid hexadecimal string. The string
 * may or may not be `0x`-prefixed, and the test is case-insensitive.
 *
 * @param hexString - The string to test.
 * @returns Whether the specified string is a valid hexadecimal string. The
 * string may or may not be `0x`-prefixed.
 */
function isValidHexString(hexString) {
    return /^(?:0x)?[a-f0-9]+$/iu.test(hexString);
}
exports.isValidHexString = isValidHexString;
/**
 * @param hexString - The hexadecimal string to convert.
 * @returns The {@link Buffer} corresponding to the hexadecimal string.
 */
function hexStringToBuffer(hexString) {
    if (Buffer.isBuffer(hexString)) {
        return hexString;
    }
    if (typeof hexString !== 'string' || !isValidHexString(hexString)) {
        throw new Error(`Invalid hex string: "${hexString}".`);
    }
    return Buffer.from(stripHexPrefix(hexString), 'hex');
}
exports.hexStringToBuffer = hexStringToBuffer;
/**
 * @param hexString - The hexadecimal string to convert.
 * @returns The {@link Buffer} corresponding to the hexadecimal string.
 */
function nullableHexStringToBuffer(hexString) {
    if (hexString) {
        return hexStringToBuffer(hexString);
    }
    return undefined;
}
exports.nullableHexStringToBuffer = nullableHexStringToBuffer;
/**
 * Tests whether the specified {@link Buffer} is a valid BIP-32 key.
 * A valid buffer key is 64 bytes long and has at least one non-zero byte.
 *
 * @param buffer - The {@link Buffer} to test.
 * @param expectedLength - The expected length of the buffer.
 * @returns Whether the buffer represents a valid BIP-32 key.
 */
function isValidBufferKey(buffer, expectedLength) {
    if (buffer.length !== expectedLength) {
        return false;
    }
    for (const byte of buffer) {
        if (byte !== 0) {
            return true;
        }
    }
    return false;
}
exports.isValidBufferKey = isValidBufferKey;
/**
 * Tests whether the specified number is a valid integer equal to or greater than 0.
 *
 * @param value - The number to test.
 * @returns Whether the number is a valid integer.
 */
function isValidInteger(value) {
    return typeof value === 'number' && Number.isInteger(value) && value >= 0;
}
exports.isValidInteger = isValidInteger;
/**
 * Get a BigInt from a byte array.
 *
 * @param bytes - The byte array to get the BigInt for.
 * @returns The byte array as BigInt.
 */
function bytesToNumber(bytes) {
    return BigInt(`0x${utils_1.bytesToHex(bytes)}`);
}
exports.bytesToNumber = bytesToNumber;
/**
 * Get a Buffer from a hexadecimal string or Buffer. Validates that the
 * length of the Buffer matches the specified length, and that the buffer
 * is not empty.
 *
 * @param value - The value to convert to a Buffer.
 * @param length - The length to validate the Buffer against.
 */
function getBuffer(value, length) {
    if (value instanceof Buffer) {
        validateBuffer(value, length);
        return value;
    }
    if (typeof value === 'string') {
        if (!isValidHexString(value)) {
            throw new Error(`Invalid value: Must be a valid hex string of length: ${length * 2}.`);
        }
        const buffer = hexStringToBuffer(value);
        validateBuffer(buffer, length);
        return buffer;
    }
    throw new Error(`Invalid value: Expected a Buffer or hexadecimal string.`);
}
exports.getBuffer = getBuffer;
function validateBuffer(buffer, length) {
    if (!isValidBufferKey(buffer, length)) {
        throw new Error(`Invalid value: Must be a non-zero ${length}-byte buffer.`);
    }
}
const decodeBase58check = (value) => {
    const base58Check = base_1.base58check(sha256_1.sha256);
    try {
        return Buffer.from(base58Check.decode(value));
    }
    catch (_a) {
        throw new Error(`Invalid value: Value is not base58-encoded, or the checksum is invalid.`);
    }
};
exports.decodeBase58check = decodeBase58check;
const encodeBase58check = (value) => {
    const base58Check = base_1.base58check(sha256_1.sha256);
    return base58Check.encode(value);
};
exports.encodeBase58check = encodeBase58check;
/**
 * Get the fingerprint of a compressed public key as number.
 *
 * @param publicKey - The compressed public key to get the fingerprint for.
 */
const getFingerprint = (publicKey) => {
    if (!isValidBufferKey(publicKey, 33)) {
        throw new Error(`Invalid public key: The key must be a 33-byte, non-zero Buffer.`);
    }
    return Buffer.from(ripemd160_1.ripemd160(publicKey)).readUInt32BE(0);
};
exports.getFingerprint = getFingerprint;
//# sourceMappingURL=utils.js.map