{"version":3,"file":"extended-keys.js","sourceRoot":"","sources":["../src/extended-keys.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  decodeBase58check,\n  encodeBase58check,\n  isValidBufferKey,\n} from './utils';\nimport { validateBIP44Depth } from './BIP44Node';\nimport { compressPublicKey, decompressPublicKey } from './curves/secp256k1';\n\n// https://github.com/bitcoin/bips/blob/274fa400d630ba757bec0c03b35ebe2345197108/bip-0032.mediawiki#Serialization_format\nexport const PUBLIC_KEY_VERSION = 0x0488b21e;\nexport const PRIVATE_KEY_VERSION = 0x0488ade4;\n\nexport type ExtendedKeyVersion =\n  | typeof PUBLIC_KEY_VERSION\n  | typeof PRIVATE_KEY_VERSION;\n\n/**\n * An extended public or private key. Contains either a public or private key,\n * depending on the version.\n */\ntype ExtendedKeyLike = {\n  version: ExtendedKeyVersion;\n  depth: number;\n  parentFingerprint: number;\n  index: number;\n  chainCode: Buffer;\n};\n\ntype ExtendedPublicKey = ExtendedKeyLike & {\n  version: typeof PUBLIC_KEY_VERSION;\n  publicKey: Buffer;\n};\n\ntype ExtendedPrivateKey = ExtendedKeyLike & {\n  version: typeof PRIVATE_KEY_VERSION;\n  privateKey: Buffer;\n};\n\nexport type ExtendedKey = ExtendedPublicKey | ExtendedPrivateKey;\n\n/**\n * Decodes an extended public or private key. In the case of an extended public key, the public key\n * is returned in the uncompressed form.\n *\n * Throws an error if the extended key is invalid.\n *\n * @param extendedKey - The extended key string to attempt to decode.\n */\nexport const decodeExtendedKey = (extendedKey: string): ExtendedKey => {\n  const buffer = decodeBase58check(extendedKey);\n\n  if (buffer.length !== 78) {\n    throw new Error(\n      `Invalid extended key: Expected a length of 78, got ${buffer.length}.`,\n    );\n  }\n\n  const version = buffer.readUInt32BE(0);\n  const depth = buffer.readUInt8(4);\n  validateBIP44Depth(depth);\n\n  const parentFingerprint = buffer.readUInt32BE(5);\n  const index = buffer.readUInt32BE(9);\n\n  const chainCode = buffer.slice(13, 45);\n  if (!isValidBufferKey(chainCode, 32)) {\n    throw new Error(\n      `Invalid extended key: Chain code must be a 32-byte non-zero Buffer.`,\n    );\n  }\n\n  const key = buffer.slice(45, 78);\n  if (!isValidBufferKey(key, 33)) {\n    throw new Error(\n      `Invalid extended key: Key must be a 33-byte non-zero Buffer.`,\n    );\n  }\n\n  if (version === PUBLIC_KEY_VERSION) {\n    if (key.readUInt8(0) !== 0x02 && key.readUInt8(0) !== 0x03) {\n      throw new Error(\n        `Invalid extended key: Public key must start with 0x02 or 0x03.`,\n      );\n    }\n\n    return {\n      version,\n      depth,\n      parentFingerprint,\n      index,\n      chainCode,\n      publicKey: decompressPublicKey(key),\n    };\n  }\n\n  if (version === PRIVATE_KEY_VERSION) {\n    if (key.readUInt8(0) !== 0x00) {\n      throw new Error(\n        `Invalid extended key: Private key must start with 0x00.`,\n      );\n    }\n\n    return {\n      version,\n      depth,\n      parentFingerprint,\n      index,\n      chainCode,\n      privateKey: key.slice(1),\n    };\n  }\n\n  throw new Error(\n    `Invalid extended key: Expected a public (xpub) or private key (xprv) version.`,\n  );\n};\n\n/**\n * Encodes an extended public or private key. Assumes that all the inputs are verified beforehand.\n *\n * @param extendedKey - The extended key data to encode.\n */\nexport const encodeExtendedKey = (extendedKey: ExtendedKey): string => {\n  const { version, depth, parentFingerprint, index, chainCode } = extendedKey;\n  const buffer = Buffer.alloc(78);\n\n  buffer.writeUInt32BE(version, 0);\n  buffer.writeUInt8(depth, 4);\n  buffer.writeUInt32BE(parentFingerprint, 5);\n  buffer.writeUInt32BE(index, 9);\n\n  chainCode.copy(buffer, 13);\n\n  if (extendedKey.version === PUBLIC_KEY_VERSION) {\n    const { publicKey } = extendedKey;\n    const compressedPublicKey = compressPublicKey(publicKey);\n\n    compressedPublicKey.copy(buffer, 45);\n  }\n\n  if (extendedKey.version === PRIVATE_KEY_VERSION) {\n    const { privateKey } = extendedKey;\n    privateKey.copy(buffer, 46);\n  }\n\n  return encodeBase58check(buffer);\n};\n"]}