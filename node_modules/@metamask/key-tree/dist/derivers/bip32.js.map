{"version":3,"file":"bip32.js","sourceRoot":"","sources":["../../src/derivers/bip32.ts"],"names":[],"mappings":";;;AAAA,6CAA6D;AAC7D,6CAA0C;AAC1C,iDAA8C;AAC9C,2CAKyB;AACzB,4CAAwE;AACxE,oCAA2C;AAC3C,sCAAkD;AAClD,8CAA2C;AAG3C;;;;;;;;;;GAUG;AACH,SAAgB,sBAAsB,CAAC,GAAe;IACpD,IAAA,cAAM,EACJ,GAAG,YAAY,UAAU,IAAI,IAAA,uBAAe,EAAC,GAAG,EAAE,4BAAgB,CAAC,EACnE,8DAA8D,CAC/D,CAAC;IAEF,MAAM,SAAS,GAAG,kBAAS,CAAC,YAAY,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACrD,OAAO,qBAAqB,CAAC,SAAS,CAAC,CAAC;AAC1C,CAAC;AARD,wDAQC;AAED;;;;;;;;;;GAUG;AACH,SAAgB,qBAAqB,CAAC,GAAe;IACnD,IAAA,cAAM,EACJ,GAAG,YAAY,UAAU;QACvB,IAAA,uBAAe,EAAC,GAAG,EAAE,kBAAS,CAAC,eAAe,CAAC,EACjD,8DAA8D,CAC/D,CAAC;IAEF,OAAO,IAAA,iBAAS,EAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;AAC5C,CAAC;AARD,sDAQC;AAED;;;;;;;;GAQG;AACI,KAAK,UAAU,cAAc,CAAC,EACnC,IAAI,EACJ,IAAI,EACJ,KAAK,GAAG,kBAAS,GACE;IACnB,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IACtC,IAAI,CAAC,UAAU,IAAI,CAAC,KAAK,CAAC,oBAAoB,EAAE;QAC9C,MAAM,IAAI,KAAK,CACb,0DAA0D,KAAK,CAAC,IAAI,GAAG,CACxE,CAAC;KACH;IAED,IAAI,CAAC,IAAI,EAAE;QACT,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;KAC5E;IAED,IAAI,UAAU,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;QAClC,MAAM,IAAI,KAAK,CACb,8EAA8E,CAC/E,CAAC;KACH;IAED,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACrC,MAAM,UAAU,GAAG,QAAQ,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;IAE3C,IACE,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC;QACzB,CAAC,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC;QAC7B,UAAU,GAAG,CAAC;QACd,UAAU,IAAI,kCAAsB,EACpC;QACA,MAAM,IAAI,KAAK,CACb,oFAAoF,kCAAsB,GAAG,CAC9G,CAAC;KACH;IAED,IAAI,IAAI,CAAC,eAAe,EAAE;QACxB,MAAM,eAAe,GAAG,MAAM,qBAAqB,CAAC;YAClD,UAAU,EAAE,IAAI,CAAC,eAAe;YAChC,UAAU;YACV,UAAU;YACV,KAAK;SACN,CAAC,CAAC;QAEH,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,GAAG,MAAM,WAAW,CAAC;YAClD,UAAU,EAAE,IAAI,CAAC,eAAe;YAChC,SAAS,EAAE,IAAI,CAAC,cAAc;YAC9B,eAAe;YACf,KAAK;SACN,CAAC,CAAC;QAEH,OAAO,uBAAU,CAAC,eAAe,CAAC;YAChC,UAAU;YACV,SAAS;YACT,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC;YACrB,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;YACzC,iBAAiB,EAAE,IAAI,CAAC,WAAW;YACnC,KAAK,EAAE,UAAU,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,kCAAsB,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7D,KAAK,EAAE,KAAK,CAAC,IAAI;SAClB,CAAC,CAAC;KACJ;IAED,MAAM,eAAe,GAAG,MAAM,qBAAqB,CAAC;QAClD,eAAe,EAAE,IAAI,CAAC,wBAAwB;QAC9C,UAAU;KACX,CAAC,CAAC;IAEH,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,iBAAiB,CAAC;QACjD,SAAS,EAAE,IAAI,CAAC,wBAAwB;QACxC,SAAS,EAAE,IAAI,CAAC,cAAc;QAC9B,eAAe;QACf,KAAK;KACN,CAAC,CAAC;IAEH,OAAO,uBAAU,CAAC,eAAe,CAAC;QAChC,SAAS;QACT,SAAS;QACT,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC;QACrB,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;QACzC,iBAAiB,EAAE,IAAI,CAAC,WAAW;QACnC,KAAK,EAAE,UAAU;QACjB,KAAK,EAAE,KAAK,CAAC,IAAI;KAClB,CAAC,CAAC;AACL,CAAC;AAnFD,wCAmFC;AASD,kGAAkG;AAClG;;;;;GAKG;AACH,KAAK,UAAU,qBAAqB,CAAC,EACnC,UAAU,EACV,UAAU,EACV,UAAU,EACV,KAAK,GACqB;IAC1B,IAAI,UAAU,EAAE;QACd,iBAAiB;QACjB,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;QACrC,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAE7C,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,GAAG,kCAAsB,EAAE,KAAK,CAAC,CAAC;QAC9D,OAAO,IAAA,mBAAW,EAAC,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;KACnE;IAED,eAAe;IACf,MAAM,eAAe,GAAG,MAAM,KAAK,CAAC,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IACnE,OAAO,qBAAqB,CAAC,EAAE,eAAe,EAAE,UAAU,EAAE,CAAC,CAAC;AAChE,CAAC;AAOD,KAAK,UAAU,qBAAqB,CAAC,EACnC,eAAe,EACf,UAAU,GACgB;IAC1B,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;IACrC,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IAE7C,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;IACrC,OAAO,IAAA,mBAAW,EAAC,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC,CAAC;AACpD,CAAC;AAED;;;;;;;;GAQG;AACH,SAAgB,UAAU,CACxB,eAA2B,EAC3B,UAAsB,EACtB,KAAY;IAEZ,MAAM,UAAU,GAAG,IAAA,qBAAa,EAAC,eAAe,CAAC,CAAC;IAClD,MAAM,KAAK,GAAG,IAAA,qBAAa,EAAC,UAAU,CAAC,CAAC;IAExC,IAAI,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;QAC1B,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;KACzE;IAED,MAAM,KAAK,GAAG,IAAA,YAAG,EAAC,UAAU,GAAG,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACrD,MAAM,KAAK,GAAG,IAAA,kBAAU,EAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;IAE/D,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE;QACnC,MAAM,IAAI,KAAK,CACb,qEAAqE,CACtE,CAAC;KACH;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAtBD,gCAsBC;AASD;;;;;GAKG;AACH,KAAK,UAAU,WAAW,CAAC,EACzB,UAAU,EACV,SAAS,EACT,eAAe,EACf,KAAK,GACW;IAChB,MAAM,OAAO,GAAG,IAAA,WAAI,EAAC,eAAM,EAAE,SAAS,EAAE,eAAe,CAAC,CAAC;IACzD,MAAM,WAAW,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACzC,MAAM,cAAc,GAAG,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;IAEzC,kEAAkE;IAClE,wIAAwI;IACxI,IAAI,KAAK,CAAC,IAAI,KAAK,SAAS,EAAE;QAC5B,MAAM,SAAS,GAAG,MAAM,KAAK,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;QACxD,OAAO,EAAE,UAAU,EAAE,WAAW,EAAE,SAAS,EAAE,SAAS,EAAE,cAAc,EAAE,CAAC;KAC1E;IAED,MAAM,eAAe,GAAG,UAAU,CAAC,UAAU,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;IACnE,MAAM,SAAS,GAAG,MAAM,KAAK,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;IAE5D,OAAO,EAAE,UAAU,EAAE,eAAe,EAAE,SAAS,EAAE,SAAS,EAAE,cAAc,EAAE,CAAC;AAC/E,CAAC;AASD,SAAS,iBAAiB,CAAC,EACzB,SAAS,EACT,SAAS,EACT,eAAe,EACf,KAAK,GACiB;IACtB,MAAM,OAAO,GAAG,IAAA,WAAI,EAAC,eAAM,EAAE,SAAS,EAAE,eAAe,CAAC,CAAC;IACzD,MAAM,WAAW,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACzC,MAAM,cAAc,GAAG,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;IAEzC,0DAA0D;IAC1D,MAAM,cAAc,GAAG,KAAK,CAAC,SAAS,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;IAE/D,OAAO;QACL,SAAS,EAAE,cAAc;QACzB,SAAS,EAAE,cAAc;KAC1B,CAAC;AACJ,CAAC","sourcesContent":["import { keccak_256 as keccak256 } from '@noble/hashes/sha3';\nimport { hmac } from '@noble/hashes/hmac';\nimport { sha512 } from '@noble/hashes/sha512';\nimport {\n  assert,\n  bytesToBigInt,\n  concatBytes,\n  hexToBytes,\n} from '@metamask/utils';\nimport { BIP_32_HARDENED_OFFSET, BYTES_KEY_LENGTH } from '../constants';\nimport { isValidBytesKey } from '../utils';\nimport { Curve, mod, secp256k1 } from '../curves';\nimport { SLIP10Node } from '../SLIP10Node';\nimport { DeriveChildKeyArgs, DerivedKeys } from '.';\n\n/**\n * Converts a BIP-32 private key to an Ethereum address.\n *\n * **WARNING:** Only validates that the key is non-zero and of the correct\n * length. It is the consumer's responsibility to ensure that the specified\n * key is a valid BIP-44 Ethereum `address_index` key.\n *\n * @param key - The `address_index` private key bytes to convert to an Ethereum\n * address.\n * @returns The Ethereum address corresponding to the given key.\n */\nexport function privateKeyToEthAddress(key: Uint8Array) {\n  assert(\n    key instanceof Uint8Array && isValidBytesKey(key, BYTES_KEY_LENGTH),\n    'Invalid key: The key must be a 32-byte, non-zero Uint8Array.',\n  );\n\n  const publicKey = secp256k1.getPublicKey(key, false);\n  return publicKeyToEthAddress(publicKey);\n}\n\n/**\n * Converts a BIP-32 public key to an Ethereum address.\n *\n * **WARNING:** Only validates that the key is non-zero and of the correct\n * length. It is the consumer's responsibility to ensure that the specified\n * key is a valid BIP-44 Ethereum `address_index` key.\n *\n * @param key - The `address_index` public key bytes to convert to an Ethereum\n * address.\n * @returns The Ethereum address corresponding to the given key.\n */\nexport function publicKeyToEthAddress(key: Uint8Array) {\n  assert(\n    key instanceof Uint8Array &&\n      isValidBytesKey(key, secp256k1.publicKeyLength),\n    'Invalid key: The key must be a 65-byte, non-zero Uint8Array.',\n  );\n\n  return keccak256(key.slice(1)).slice(-20);\n}\n\n/**\n * Derive a BIP-32 child key with a given path from a parent key.\n *\n * @param path - The derivation path part to derive.\n * @param node - The node to derive from.\n * @param curve - The curve to use for derivation.\n * @returns A tuple containing the derived private key, public key and chain\n * code.\n */\nexport async function deriveChildKey({\n  path,\n  node,\n  curve = secp256k1,\n}: DeriveChildKeyArgs): Promise<SLIP10Node> {\n  const isHardened = path.includes(`'`);\n  if (!isHardened && !curve.deriveUnhardenedKeys) {\n    throw new Error(\n      `Invalid path: Cannot derive unhardened child keys with ${curve.name}.`,\n    );\n  }\n\n  if (!node) {\n    throw new Error('Invalid parameters: Must specify a node to derive from.');\n  }\n\n  if (isHardened && !node.privateKey) {\n    throw new Error(\n      'Invalid parameters: Cannot derive hardened child keys without a private key.',\n    );\n  }\n\n  const indexPart = path.split(`'`)[0];\n  const childIndex = parseInt(indexPart, 10);\n\n  if (\n    !/^\\d+$/u.test(indexPart) ||\n    !Number.isInteger(childIndex) ||\n    childIndex < 0 ||\n    childIndex >= BIP_32_HARDENED_OFFSET\n  ) {\n    throw new Error(\n      `Invalid BIP-32 index: The index must be a non-negative decimal integer less than ${BIP_32_HARDENED_OFFSET}.`,\n    );\n  }\n\n  if (node.privateKeyBytes) {\n    const secretExtension = await deriveSecretExtension({\n      privateKey: node.privateKeyBytes,\n      childIndex,\n      isHardened,\n      curve,\n    });\n\n    const { privateKey, chainCode } = await generateKey({\n      privateKey: node.privateKeyBytes,\n      chainCode: node.chainCodeBytes,\n      secretExtension,\n      curve,\n    });\n\n    return SLIP10Node.fromExtendedKey({\n      privateKey,\n      chainCode,\n      depth: node.depth + 1,\n      masterFingerprint: node.masterFingerprint,\n      parentFingerprint: node.fingerprint,\n      index: childIndex + (isHardened ? BIP_32_HARDENED_OFFSET : 0),\n      curve: curve.name,\n    });\n  }\n\n  const publicExtension = await derivePublicExtension({\n    parentPublicKey: node.compressedPublicKeyBytes,\n    childIndex,\n  });\n\n  const { publicKey, chainCode } = generatePublicKey({\n    publicKey: node.compressedPublicKeyBytes,\n    chainCode: node.chainCodeBytes,\n    publicExtension,\n    curve,\n  });\n\n  return SLIP10Node.fromExtendedKey({\n    publicKey,\n    chainCode,\n    depth: node.depth + 1,\n    masterFingerprint: node.masterFingerprint,\n    parentFingerprint: node.fingerprint,\n    index: childIndex,\n    curve: curve.name,\n  });\n}\n\ntype DeriveSecretExtensionArgs = {\n  privateKey: Uint8Array;\n  childIndex: number;\n  isHardened: boolean;\n  curve: Curve;\n};\n\n// the bip32 secret extension is created from the parent private or public key and the child index\n/**\n * @param options\n * @param options.privateKey\n * @param options.childIndex\n * @param options.isHardened\n */\nasync function deriveSecretExtension({\n  privateKey,\n  childIndex,\n  isHardened,\n  curve,\n}: DeriveSecretExtensionArgs) {\n  if (isHardened) {\n    // Hardened child\n    const indexBytes = new Uint8Array(4);\n    const view = new DataView(indexBytes.buffer);\n\n    view.setUint32(0, childIndex + BIP_32_HARDENED_OFFSET, false);\n    return concatBytes([new Uint8Array([0]), privateKey, indexBytes]);\n  }\n\n  // Normal child\n  const parentPublicKey = await curve.getPublicKey(privateKey, true);\n  return derivePublicExtension({ parentPublicKey, childIndex });\n}\n\ntype DerivePublicExtensionArgs = {\n  parentPublicKey: Uint8Array;\n  childIndex: number;\n};\n\nasync function derivePublicExtension({\n  parentPublicKey,\n  childIndex,\n}: DerivePublicExtensionArgs) {\n  const indexBytes = new Uint8Array(4);\n  const view = new DataView(indexBytes.buffer);\n\n  view.setUint32(0, childIndex, false);\n  return concatBytes([parentPublicKey, indexBytes]);\n}\n\n/**\n * Add a tweak to the private key: `(privateKey + tweak) % n`.\n *\n * @param privateKeyBytes - The private key as 32 byte Uint8Array.\n * @param tweakBytes - The tweak as 32 byte Uint8Array.\n * @param curve - The curve to use.\n * @throws If the private key or tweak is invalid.\n * @returns The private key with the tweak added to it.\n */\nexport function privateAdd(\n  privateKeyBytes: Uint8Array,\n  tweakBytes: Uint8Array,\n  curve: Curve,\n): Uint8Array {\n  const privateKey = bytesToBigInt(privateKeyBytes);\n  const tweak = bytesToBigInt(tweakBytes);\n\n  if (tweak >= curve.curve.n) {\n    throw new Error('Invalid tweak: Tweak is larger than the curve order.');\n  }\n\n  const added = mod(privateKey + tweak, curve.curve.n);\n  const bytes = hexToBytes(added.toString(16).padStart(64, '0'));\n\n  if (!curve.isValidPrivateKey(bytes)) {\n    throw new Error(\n      'Invalid private key or tweak: The resulting private key is invalid.',\n    );\n  }\n\n  return bytes;\n}\n\ntype GenerateKeyArgs = {\n  privateKey: Uint8Array;\n  chainCode: Uint8Array;\n  secretExtension: Uint8Array;\n  curve: Curve;\n};\n\n/**\n * @param options\n * @param options.privateKey\n * @param options.chainCode\n * @param options.secretExtension\n */\nasync function generateKey({\n  privateKey,\n  chainCode,\n  secretExtension,\n  curve,\n}: GenerateKeyArgs): Promise<DerivedKeys & { privateKey: Uint8Array }> {\n  const entropy = hmac(sha512, chainCode, secretExtension);\n  const keyMaterial = entropy.slice(0, 32);\n  const childChainCode = entropy.slice(32);\n\n  // If curve is ed25519: The returned child key ki is parse256(IL).\n  // https://github.com/satoshilabs/slips/blob/133ea52a8e43d338b98be208907e144277e44c0e/slip-0010.md#private-parent-key--private-child-key\n  if (curve.name === 'ed25519') {\n    const publicKey = await curve.getPublicKey(keyMaterial);\n    return { privateKey: keyMaterial, publicKey, chainCode: childChainCode };\n  }\n\n  const childPrivateKey = privateAdd(privateKey, keyMaterial, curve);\n  const publicKey = await curve.getPublicKey(childPrivateKey);\n\n  return { privateKey: childPrivateKey, publicKey, chainCode: childChainCode };\n}\n\ntype GeneratePublicKeyArgs = {\n  publicKey: Uint8Array;\n  chainCode: Uint8Array;\n  publicExtension: Uint8Array;\n  curve: Curve;\n};\n\nfunction generatePublicKey({\n  publicKey,\n  chainCode,\n  publicExtension,\n  curve,\n}: GeneratePublicKeyArgs): DerivedKeys {\n  const entropy = hmac(sha512, chainCode, publicExtension);\n  const keyMaterial = entropy.slice(0, 32);\n  const childChainCode = entropy.slice(32);\n\n  // This function may fail if the resulting key is invalid.\n  const childPublicKey = curve.publicAdd(publicKey, keyMaterial);\n\n  return {\n    publicKey: childPublicKey,\n    chainCode: childChainCode,\n  };\n}\n"]}