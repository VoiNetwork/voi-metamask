/// <reference types="node" />
import { Curve } from '../curves';
import { SLIP10Node } from '../SLIP10Node';
import { DeriveChildKeyArgs } from '.';
/**
 * Converts a BIP-32 private key to an Ethereum address.
 *
 * **WARNING:** Only validates that the key is non-zero and of the correct
 * length. It is the consumer's responsibility to ensure that the specified
 * key is a valid BIP-44 Ethereum `address_index` key.
 *
 * @param key - The `address_index` private key buffer to convert to an Ethereum
 * address.
 * @returns The Ethereum address corresponding to the given key.
 */
export declare function privateKeyToEthAddress(key: Buffer): Buffer;
/**
 * Converts a BIP-32 public key to an Ethereum address.
 *
 * **WARNING:** Only validates that the key is non-zero and of the correct
 * length. It is the consumer's responsibility to ensure that the specified
 * key is a valid BIP-44 Ethereum `address_index` key.
 *
 * @param key - The `address_index` public key buffer to convert to an Ethereum
 * address.
 * @returns The Ethereum address corresponding to the given key.
 */
export declare function publicKeyToEthAddress(key: Buffer): Buffer;
/**
 * Derive a BIP-32 child key with a given path from a parent key.
 *
 * @param path - The derivation path part to derive.
 * @param node - The node to derive from.
 * @param curve - The curve to use for derivation.
 * @returns A tuple containing the derived private key, public key and chain
 * code.
 */
export declare function deriveChildKey({ path, node, curve, }: DeriveChildKeyArgs): Promise<SLIP10Node>;
/**
 * Add a tweak to the private key: `(privateKey + tweak) % n`.
 *
 * @param privateKeyBuffer - The private key as 32 byte Uint8Array.
 * @param tweakBuffer - The tweak as 32 byte Uint8Array.
 * @param curve - The curve to use.
 * @throws If the private key or tweak is invalid.
 * @returns The private key with the tweak added to it.
 */
export declare function privateAdd(privateKeyBuffer: Uint8Array, tweakBuffer: Uint8Array, curve: Curve): Buffer;
