{"version":3,"file":"bip39.js","sourceRoot":"","sources":["../../src/derivers/bip39.ts"],"names":[],"mappings":";;;AAAA,wCAA8C;AAC9C,6CAA0C;AAC1C,iDAA8C;AAE9C,sCAA6C;AAC7C,8CAA2C;AAC3C,oCAA0C;AAG1C;;GAEG;AACH,SAAgB,wBAAwB,CAAC,QAAgB;IACvD,OAAO,SAAS,QAAQ,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;AAClD,CAAC;AAFD,4DAEC;AAED,gEAAgE;AAChE;;;GAGG;AACI,KAAK,UAAU,cAAc,CAAC,EACnC,IAAI,EACJ,KAAK,GACc;IACnB,OAAO,sBAAsB,CAAC,MAAM,IAAA,sBAAc,EAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;AACnE,CAAC;AALD,wCAKC;AAED;;;;GAIG;AACI,KAAK,UAAU,sBAAsB,CAC1C,IAAgB,EAChB,QAAe,kBAAS;IAExB,MAAM,GAAG,GAAG,IAAA,WAAI,EAAC,eAAM,EAAE,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAC7C,MAAM,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACpC,MAAM,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;IAEhC,MAAM,iBAAiB,GAAG,IAAA,sBAAc,EACtC,MAAM,KAAK,CAAC,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,CAC3C,CAAC;IAEF,OAAO,uBAAU,CAAC,eAAe,CAAC;QAChC,UAAU;QACV,SAAS;QACT,iBAAiB;QACjB,KAAK,EAAE,CAAC;QACR,iBAAiB,EAAE,CAAC;QACpB,KAAK,EAAE,CAAC;QACR,KAAK,EAAE,KAAK,CAAC,IAAI;KAClB,CAAC,CAAC;AACL,CAAC;AArBD,wDAqBC","sourcesContent":["import { mnemonicToSeed } from '@scure/bip39';\nimport { hmac } from '@noble/hashes/hmac';\nimport { sha512 } from '@noble/hashes/sha512';\nimport { BIP39Node } from '../constants';\nimport { Curve, secp256k1 } from '../curves';\nimport { SLIP10Node } from '../SLIP10Node';\nimport { getFingerprint } from '../utils';\nimport { DeriveChildKeyArgs } from '.';\n\n/**\n * @param mnemonic\n */\nexport function bip39MnemonicToMultipath(mnemonic: string): BIP39Node {\n  return `bip39:${mnemonic.toLowerCase().trim()}`;\n}\n\n// this creates a child key using bip39, ignoring the parent key\n/**\n * @param pathPart\n * @param curve\n */\nexport async function deriveChildKey({\n  path,\n  curve,\n}: DeriveChildKeyArgs): Promise<SLIP10Node> {\n  return createBip39KeyFromSeed(await mnemonicToSeed(path), curve);\n}\n\n/**\n * @param seed - The cryptographic seed bytes.\n * @param curve - The curve to use.\n * @returns An object containing the corresponding BIP-39 master key and chain code.\n */\nexport async function createBip39KeyFromSeed(\n  seed: Uint8Array,\n  curve: Curve = secp256k1,\n): Promise<SLIP10Node> {\n  const key = hmac(sha512, curve.secret, seed);\n  const privateKey = key.slice(0, 32);\n  const chainCode = key.slice(32);\n\n  const masterFingerprint = getFingerprint(\n    await curve.getPublicKey(privateKey, true),\n  );\n\n  return SLIP10Node.fromExtendedKey({\n    privateKey,\n    chainCode,\n    masterFingerprint,\n    depth: 0,\n    parentFingerprint: 0,\n    index: 0,\n    curve: curve.name,\n  });\n}\n"]}