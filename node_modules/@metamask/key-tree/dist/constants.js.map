{"version":3,"file":"constants.js","sourceRoot":"","sources":["../src/constants.ts"],"names":[],"mappings":";;;AAAa,QAAA,0BAA0B,GAAG,EAAE,CAAC;AAEhC,QAAA,iBAAiB,GAAG,EAAE,CAAC;AAEvB,QAAA,sBAAsB,GAAG,EAAE,CAAC;AAE5B,QAAA,gBAAgB,GAAG,CAAC,CAAC;AACrB,QAAA,gBAAgB,GAAG,CAAC,CAAC;AAsBrB,QAAA,qBAAqB,GAAG,WAAW,CAAC;AAEjD;;;;GAIG;AACU,QAAA,iBAAiB,GAAG,gBAAgB,CAAC;AAElD;;;;GAIG;AACU,QAAA,iBAAiB,GAAG,sCAAsC,CAAC;AAE3D,QAAA,sBAAsB,GAAG,UAAU,CAAC","sourcesContent":["export const BUFFER_EXTENDED_KEY_LENGTH = 64;\n\nexport const BUFFER_KEY_LENGTH = 32;\n\nexport const HEXADECIMAL_KEY_LENGTH = 64;\n\nexport const MIN_BIP_44_DEPTH = 0;\nexport const MAX_BIP_44_DEPTH = 5;\n\nexport type MinBIP44Depth = typeof MIN_BIP_44_DEPTH;\nexport type MaxBIP44Depth = typeof MAX_BIP_44_DEPTH;\nexport type BIP44Depth = MinBIP44Depth | 1 | 2 | 3 | 4 | MaxBIP44Depth;\n\n// BIP-44 derivation path:\n// m / purpose' / coin_type' / account' / change / address_index\n//\n// Per BIP-43 / BIP-44, \"purpose\" should always be \"44\":\n// m / 44' / coin_type' / account' / change / address_index\n//\n// The Ethereum \"coin_type\" is \"60\". Its \"account\" and \"change\" indices are\n// always \"0\". Here's an example Ethereum HD path for account \"0\":\n// m  / 44' / 60' / 0' / 0 / 0\n\nexport type AnonymizedBIP39Node = 'm';\nexport type BIP39Node = `bip39:${string}`;\nexport type HardenedBIP32Node = `bip32:${number}'`;\nexport type UnhardenedBIP32Node = `bip32:${number}`;\nexport type BIP32Node = HardenedBIP32Node | UnhardenedBIP32Node;\n\nexport const BIP44PurposeNodeToken = `bip32:44'`;\n\n/**\n * e.g.\n * -  bip32:0\n * -  bip32:0'\n */\nexport const BIP_32_PATH_REGEX = /^bip32:\\d+'?$/u;\n\n/**\n * bip39:<SPACE_DELMITED_SEED_PHRASE>\n *\n * The seed phrase must consist of 12 <= 24 words.\n */\nexport const BIP_39_PATH_REGEX = /^bip39:([a-z]+){1}( [a-z]+){11,23}$/u;\n\nexport const BIP_32_HARDENED_OFFSET = 0x80000000;\n\ntype HDPathString0 = AnonymizedBIP39Node;\ntype HDPathString1 = `${HDPathString0} / ${HardenedBIP32Node}`;\ntype HDPathString2 = `${HDPathString1} / ${HardenedBIP32Node}`;\ntype HDPathString3 = `${HDPathString2} / ${HardenedBIP32Node}`;\ntype HDPathString4 = `${HDPathString3} / ${BIP32Node}`;\ntype HDPathString5 = `${HDPathString4} / ${BIP32Node}`;\n\nexport type CoinTypeHDPathString = HDPathString2;\nexport type ChangeHDPathString = HDPathString4;\nexport type AddressHDPathString = HDPathString5;\n\nexport type HDPathString =\n  | HDPathString0\n  | HDPathString1\n  | HDPathString2\n  | HDPathString3\n  | HDPathString4\n  | HDPathString5;\n\ntype RootedHDPathTuple0 = readonly [BIP39Node];\ntype RootedHDPathTuple1 = readonly [...RootedHDPathTuple0, HardenedBIP32Node];\ntype RootedHDPathTuple2 = readonly [...RootedHDPathTuple1, HardenedBIP32Node];\ntype RootedHDPathTuple3 = readonly [...RootedHDPathTuple2, HardenedBIP32Node];\ntype RootedHDPathTuple4 = readonly [...RootedHDPathTuple3, BIP32Node];\ntype RootedHDPathTuple5 = readonly [...RootedHDPathTuple4, BIP32Node];\n\nexport type RootedHDPathTuple =\n  | RootedHDPathTuple0\n  | RootedHDPathTuple1\n  | RootedHDPathTuple2\n  | RootedHDPathTuple3\n  | RootedHDPathTuple4\n  | RootedHDPathTuple5;\n\ntype PartialHDPathTuple1 = readonly [HardenedBIP32Node];\ntype PartialHDPathTuple2 = readonly [...PartialHDPathTuple1, HardenedBIP32Node];\ntype PartialHDPathTuple3 = readonly [...PartialHDPathTuple2, HardenedBIP32Node];\ntype PartialHDPathTuple4 = readonly [...PartialHDPathTuple3, BIP32Node];\ntype PartialHDPathTuple5 = readonly [...PartialHDPathTuple4, BIP32Node];\ntype PartialHDPathTuple6 = readonly [BIP32Node];\ntype PartialHDPathTuple7 = readonly [BIP32Node, BIP32Node];\ntype PartialHDPathTuple8 = readonly [HardenedBIP32Node, BIP32Node, BIP32Node];\ntype PartialHDPathTuple9 = readonly [HardenedBIP32Node, BIP32Node];\ntype PartialHDPathTuple10 = readonly [\n  HardenedBIP32Node,\n  HardenedBIP32Node,\n  BIP32Node,\n];\ntype PartialHDPathTuple11 = readonly [\n  HardenedBIP32Node,\n  HardenedBIP32Node,\n  BIP32Node,\n  BIP32Node,\n];\n\nexport type CoinTypeToAddressTuple = PartialHDPathTuple8;\n\nexport type PartialHDPathTuple =\n  | PartialHDPathTuple1\n  | PartialHDPathTuple2\n  | PartialHDPathTuple3\n  | PartialHDPathTuple4\n  | PartialHDPathTuple5\n  | PartialHDPathTuple6\n  | PartialHDPathTuple7\n  | PartialHDPathTuple8\n  | PartialHDPathTuple9\n  | PartialHDPathTuple10\n  | PartialHDPathTuple11;\n\n/**\n * Every ordered subset of a full HD path tuple.\n */\nexport type HDPathTuple = RootedHDPathTuple | PartialHDPathTuple;\n\nexport type RootedSLIP10PathTuple = readonly [BIP39Node, ...BIP32Node[]];\nexport type SLIP10PathTuple = readonly BIP32Node[];\nexport type SLIP10Path = RootedSLIP10PathTuple | SLIP10PathTuple;\n\nexport type FullHDPathTuple = RootedHDPathTuple5;\n"]}