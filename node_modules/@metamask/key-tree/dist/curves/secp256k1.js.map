{"version":3,"file":"secp256k1.js","sourceRoot":"","sources":["../../src/curves/secp256k1.ts"],"names":[],"mappings":";;;AAAA,gDAI0B;AAE1B,8CAAkD;AAAzC,kGAAA,KAAK,OAAS;AACR,yBAAiB,GAAK,iBAAK,mBAAC;AAE9B,QAAA,IAAI,GAAG,WAAW,CAAC;AAEhC,2CAA2C;AAC3C,yHAAyH;AACzH,wHAAwH;AAC3G,QAAA,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;AAE7C,QAAA,oBAAoB,GAAG,IAAI,CAAC;AAE5B,QAAA,eAAe,GAAG,EAAE,CAAC;AAE3B,MAAM,YAAY,GAAG,CAC1B,UAAwC,EACxC,UAAoB,EACZ,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,wBAAqB,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;AAH3D,QAAA,YAAY,gBAG+C;AAEjE,MAAM,SAAS,GAAG,CAAC,SAAiB,EAAE,KAAa,EAAU,EAAE;IACpE,MAAM,KAAK,GAAG,iBAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IAEvC,2DAA2D;IAC3D,uEAAuE;IACvE,uIAAuI;IACvI,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,iBAAK,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;IAExD,QAAQ,CAAC,cAAc,EAAE,CAAC;IAE1B,OAAO,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC;AAXW,QAAA,SAAS,aAWpB;AAEK,MAAM,iBAAiB,GAAG,CAAC,SAAqB,EAAU,EAAE;IACjE,MAAM,KAAK,GAAG,iBAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACvC,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC;AAHW,QAAA,iBAAiB,qBAG5B;AAEK,MAAM,mBAAmB,GAAG,CAAC,SAAqB,EAAU,EAAE;IACnE,8FAA8F;IAC9F,0DAA0D;IAC1D,MAAM,KAAK,GAAG,iBAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACvC,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC;AALW,QAAA,mBAAmB,uBAK9B","sourcesContent":["import {\n  utils,\n  getPublicKey as getSecp256k1PublicKey,\n  Point,\n} from '@noble/secp256k1';\n\nexport { CURVE as curve } from '@noble/secp256k1';\nexport const { isValidPrivateKey } = utils;\n\nexport const name = 'secp256k1';\n\n// Secret is defined in BIP-32 and SLIP-10:\n// https://github.com/bitcoin/bips/blob/274fa400d630ba757bec0c03b35ebe2345197108/bip-0032.mediawiki#master-key-generation\n// https://github.com/satoshilabs/slips/blob/133ea52a8e43d338b98be208907e144277e44c0e/slip-0010.md#master-key-generation\nexport const secret = Buffer.from('Bitcoin seed', 'utf8');\n\nexport const deriveUnhardenedKeys = true;\n\nexport const publicKeyLength = 65;\n\nexport const getPublicKey = (\n  privateKey: Uint8Array | string | bigint,\n  compressed?: boolean,\n): Buffer => Buffer.from(getSecp256k1PublicKey(privateKey, compressed));\n\nexport const publicAdd = (publicKey: Buffer, tweak: Buffer): Buffer => {\n  const point = Point.fromHex(publicKey);\n\n  // The returned child key Ki is point(parse256(IL)) + Kpar.\n  // This multiplies the tweak with the base point of the curve (Gx, Gy).\n  // https://github.com/bitcoin/bips/blob/274fa400d630ba757bec0c03b35ebe2345197108/bip-0032.mediawiki#public-parent-key--public-child-key\n  const newPoint = point.add(Point.fromPrivateKey(tweak));\n\n  newPoint.assertValidity();\n\n  return Buffer.from(newPoint.toRawBytes(false));\n};\n\nexport const compressPublicKey = (publicKey: Uint8Array): Buffer => {\n  const point = Point.fromHex(publicKey);\n  return Buffer.from(point.toRawBytes(true));\n};\n\nexport const decompressPublicKey = (publicKey: Uint8Array): Buffer => {\n  // This calculates a point on the elliptic curve from a compressed public key. We can then use\n  // this to get the uncompressed version of the public key.\n  const point = Point.fromHex(publicKey);\n  return Buffer.from(point.toRawBytes(false));\n};\n"]}