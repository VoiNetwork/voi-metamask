{"version":3,"file":"curve.js","sourceRoot":"","sources":["../../src/curves/curve.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,gDAAyC;AACzC,uDAAyC;AACzC,mDAAqC;AAIxB,QAAA,MAAM,GAAG;IACpB,SAAS;IACT,OAAO;CACR,CAAC;AAoBF;;;;GAIG;AACH,SAAgB,cAAc,CAAC,SAAyB;IACtD,OAAO,cAAM,CAAC,SAAS,CAAC,CAAC;AAC3B,CAAC;AAFD,wCAEC;AAED,sFAAsF;AACvE,WAAG,GAAK,iBAAK,KAAC","sourcesContent":["import { utils } from '@noble/secp256k1';\nimport * as secp256k1 from './secp256k1';\nimport * as ed25519 from './ed25519';\n\nexport type SupportedCurve = keyof typeof curves;\n\nexport const curves = {\n  secp256k1,\n  ed25519,\n};\n\nexport type Curve = {\n  name: SupportedCurve;\n  secret: Uint8Array;\n  deriveUnhardenedKeys: boolean;\n  publicKeyLength: number;\n  curve: {\n    n: bigint;\n  };\n  getPublicKey: (\n    privateKey: Uint8Array | string | bigint,\n    compressed?: boolean,\n  ) => Buffer | Promise<Buffer>;\n  isValidPrivateKey: (privateKey: Uint8Array | string | bigint) => boolean;\n  publicAdd: (publicKey: Buffer, tweak: Buffer) => Buffer;\n  compressPublicKey: (publicKey: Buffer) => Buffer;\n  decompressPublicKey: (publicKey: Buffer) => Buffer;\n};\n\n/**\n * Get a curve by name.\n *\n * @param curveName - The name of the curve to get.\n */\nexport function getCurveByName(curveName: SupportedCurve): Curve {\n  return curves[curveName];\n}\n\n// As long as both parameters are specified, this function is the same for all curves.\nexport const { mod } = utils;\n"]}