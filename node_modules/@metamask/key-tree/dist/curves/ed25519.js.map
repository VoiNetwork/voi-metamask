{"version":3,"file":"ed25519.js","sourceRoot":"","sources":["../../src/curves/ed25519.ts"],"names":[],"mappings":";;;AAAA,4CAAqE;AAErE,0CAAgD;AAAvC,gGAAA,KAAK,OAAS;AAEV,QAAA,IAAI,GAAG,SAAS,CAAC;AAE9B,gCAAgC;AAChC,wHAAwH;AAC3G,QAAA,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;AAE1D,0CAA0C;AAC1C,wHAAwH;AACjH,MAAM,iBAAiB,GAAG,CAAC,WAAyC,EAAE,EAAE,CAC7E,IAAI,CAAC;AADM,QAAA,iBAAiB,qBACvB;AAEM,QAAA,oBAAoB,GAAG,KAAK,CAAC;AAE7B,QAAA,eAAe,GAAG,EAAE,CAAC;AAE3B,MAAM,YAAY,GAAG,KAAK,EAC/B,UAAwC,EACxC,WAAqB,EACJ,EAAE;IACnB,MAAM,SAAS,GAAG,MAAM,sBAAmB,CAAC,UAAU,CAAC,CAAC;IACxD,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC;AANW,QAAA,YAAY,gBAMvB;AAEK,MAAM,SAAS,GAAG,CAAC,UAAkB,EAAE,MAAc,EAAU,EAAE;IACtE,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;AACrE,CAAC,CAAC;AAFW,QAAA,SAAS,aAEpB;AAEK,MAAM,iBAAiB,GAAG,CAAC,SAAiB,EAAU,EAAE;IAC7D,oDAAoD;IACpD,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAHW,QAAA,iBAAiB,qBAG5B;AAEK,MAAM,mBAAmB,GAAG,CAAC,SAAiB,EAAU,EAAE;IAC/D,oDAAoD;IACpD,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAHW,QAAA,mBAAmB,uBAG9B","sourcesContent":["import { getPublicKey as getEd25519PublicKey } from '@noble/ed25519';\n\nexport { CURVE as curve } from '@noble/ed25519';\n\nexport const name = 'ed25519';\n\n// Secret is defined in SLIP-10:\n// https://github.com/satoshilabs/slips/blob/133ea52a8e43d338b98be208907e144277e44c0e/slip-0010.md#master-key-generation\nexport const secret = Buffer.from('ed25519 seed', 'utf8');\n\n// All private keys are valid for ed25519:\n// https://github.com/satoshilabs/slips/blob/133ea52a8e43d338b98be208907e144277e44c0e/slip-0010.md#master-key-generation\nexport const isValidPrivateKey = (_privateKey: Uint8Array | string | bigint) =>\n  true;\n\nexport const deriveUnhardenedKeys = false;\n\nexport const publicKeyLength = 33;\n\nexport const getPublicKey = async (\n  privateKey: Uint8Array | string | bigint,\n  _compressed?: boolean,\n): Promise<Buffer> => {\n  const publicKey = await getEd25519PublicKey(privateKey);\n  return Buffer.concat([Buffer.alloc(1, 0), publicKey]);\n};\n\nexport const publicAdd = (_publicKey: Buffer, _tweak: Buffer): Buffer => {\n  throw new Error('Ed25519 does not support public key derivation.');\n};\n\nexport const compressPublicKey = (publicKey: Buffer): Buffer => {\n  // Ed25519 public keys don't have a compressed form.\n  return publicKey;\n};\n\nexport const decompressPublicKey = (publicKey: Buffer): Buffer => {\n  // Ed25519 public keys don't have a compressed form.\n  return publicKey;\n};\n"]}